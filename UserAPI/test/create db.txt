// const refreshToken = async (req) => {
//     const cookieRefreshToken = req.cookies?.refreshToken;

//     if (!cookieRefreshToken) {
//         throw new ResponseError(401, "No refresh token provided");
//     }

//     // Find refresh token in database
//     const refreshTokenEntry = await prismaClient.refreshToken.findUnique({
//         where: {
//             token: cookieRefreshToken
//         },
//         include: {
//             user: {
//                 select: {
//                     id: true,
//                     name: true,
//                     email: true
//                 }
//             }
//         }
//     });

//     // Validate if token exists and hasn't expired
//     if (!refreshTokenEntry) {
//         throw new ResponseError(401, "Invalid refresh token");
//     }

//     if (new Date() > refreshTokenEntry.expiresAt) {
//         // Remove expired token
//         await prismaClient.refreshToken.delete({
//             where: {
//                 token: cookieRefreshToken
//             }
//         });
//         throw new ResponseError(401, "Refresh token has expired");
//     }

//     // Verify the refresh token
//     try {
//         jwt.verify(cookieRefreshToken, process.env.REF_TOKEN_SECRET);
//     } catch (error) {
//         // Remove invalid token
//         await prismaClient.refreshToken.delete({
//             where: {
//                 token: cookieRefreshToken
//             }
//         });
//         throw new ResponseError(401, "Invalid refresh token");
//     }

//     // Generate new access token
//     const payload = {
//         userId: refreshTokenEntry.user.id,
//         name: refreshTokenEntry.user.name,
//         email: refreshTokenEntry.user.email
//     };

//     const accessToken = jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, {
//         expiresIn: process.env.ACCESS_TOKEN_EXPIRY
//     });

//     return {
//         name: refreshTokenEntry.user.name,
//         accessToken: accessToken
//     };
// };